package groupthree.myspace.lzz.controller;

import groupthree.myspace.bean.friendApply;
import groupthree.myspace.bean.imgLog;
import groupthree.myspace.bean.imgLogCmt;
import groupthree.myspace.bean.imgLogLiker;
import groupthree.myspace.bean.person;
import groupthree.myspace.lzz.service.LzzPersonService;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;


@Controller(value="LzzPersonController")
@RequestMapping(value="/personAction",produces="text/plain;charset=utf-8")
public class LzzPersonController {
	@Resource(name="LzzPersonService")LzzPersonService lzzPersonService;
	
	Gson gson = new Gson();
	
	@Autowired
	friendApply friendApply;
	
	@Autowired
	imgLog imglog;
	@Autowired
	imgLogLiker imgLogLiker;
	@Autowired
	imgLogCmt imgLogCmt;
	
	@ModelAttribute("getPerson")
	public person setPerson(HttpServletRequest request){
		return (person) request.getSession().getAttribute("user");
	}
	
	@RequestMapping(value="/login.do",method=RequestMethod.POST)
	@ResponseBody
	public String login(person person,HttpServletRequest request) {
		person p = lzzPersonService.login(person);
		ServletContext ap = request.getServletContext();
		Map<Integer,String> userList = (Map<Integer, String>) ap.getAttribute("userList");
		if(p!=null){
			if(!userList.containsKey(p.getSpace())){
				p.setBirthday(p.getBirthday().split(" ",9)[0]);
				request.getSession().setAttribute("user",p);
				return "ok";
			}else
				return "in";
		}else
			return "no";
	}
	
	@RequestMapping(value="/setPersonInfo.do")
	@ResponseBody
	public String setPersonInfo(@ModelAttribute("getPerson")person person){
		return gson.toJson(person);
	}
	
	@RequestMapping(value="/register.do")
	@ResponseBody
	public String register(person person){
		person.setSpace((int)(Math.random()*1000000+1));
		String result="";
		if(lzzPersonService.register(person))
			result = "{\"result\":\"ok\",\"space\":\""+person.getSpace()+"\"}";
		else
			result = "{\"result\":\"no\"}";
		return result;
	}
	
	@RequestMapping(value="/getPersonAll.do")
	@ResponseBody
	public String getPersonAll(@ModelAttribute("getPerson")person person){
		if(person!=null)
			return gson.toJson(lzzPersonService.getPersonAll(person.getId()));
		else return "";
	}

	@RequestMapping(value="/changePersonInfo.do",method=RequestMethod.POST)
	@ResponseBody
	public String changePersonInfo(@ModelAttribute("getPerson")person person,
			@RequestParam("imgFile")MultipartFile file,@RequestParam("name")String name,
			@RequestParam("sex")String sex,@RequestParam("signature")String signature,
			@RequestParam("birthday")String birthday,
			HttpServletRequest request) throws IllegalStateException, IOException{
		person.setBirthday(birthday);
		person.setName(name);
		person.setSex(sex);
		person.setSignature(signature);
		String path;
		if(file.isEmpty()){
			path="all/img/1_copy.jpg";
		}else{
			String pat = request.getSession().getId()+System.currentTimeMillis();
			String imgpath = request.getServletContext().getRealPath("/lzz/all/img")+"/"+pat+".jpg";
			path = "all/img/"+pat+".jpg";
			file.transferTo(new File(imgpath));
		}
		person.setImg(path);
		if(lzzPersonService.changePersonInfo(person)) return "ok";
		else return "no";
	}
	
	@RequestMapping(value="/applyFriend.do")
	@ResponseBody
	public String applyFriend(String friend_id,@ModelAttribute("getPerson")person person){
		friendApply.setApply_id(person.getId());
		friendApply.setPerson_id(Integer.parseInt(friend_id));
		if(!lzzPersonService.isSendApply(friendApply))
			if(lzzPersonService.applyFriend(friendApply)){
				return "ok";
			}else return "ohno";
		else
			return "no";
	}
	
	@RequestMapping(value="/getAllApply.do")
	@ResponseBody
	public String getAllApply(){
		return gson.toJson(lzzPersonService.getAllApply());
	}
	
	@RequestMapping(value="/perosnExist.do")
	@ResponseBody
	public String perosnExist(HttpServletRequest request){
		request.getSession().invalidate();
		return "ok";
	}
	
	@RequestMapping(value="/getImgLog.do")
	@ResponseBody
	public String getImgLog(@ModelAttribute("getPerson")person person){
		if(person!=null)
			return gson.toJson(lzzPersonService.getPersonImgLog(person.getId()));
		else return "";
	}
	
	
	@RequestMapping(value="/addLog.do")
	public void addLog(@ModelAttribute("getPerson")person person,@RequestParam("logContent")String logContent,@RequestParam("logImg")MultipartFile file,HttpServletResponse response,HttpServletRequest request) throws IOException{
		if(person!=null){
			imglog.setPerson_id(person.getId());
			if(logContent==null)
				imglog.setImgLog_content("³ÁÄ¬µÄ¸áÑò(#^.^#)");
			else imglog.setImgLog_content(logContent);
			String path="";
			if(file.isEmpty()){
				path="all/img/1_copy.jpg";
			}else{
				String imgpath = request.getServletContext().getRealPath("/lzz/all/img")+"/"+request.getSession().getId()+System.currentTimeMillis()+".jpg";
				file.transferTo(new File(imgpath));
				path = "all/img/"+request.getSession().getId()+System.currentTimeMillis()+".jpg";
			}
			imglog.setImgSrc(path);
			lzzPersonService.addLog(imglog);
		}
		response.sendRedirect("/myspace/lzz/mainView.html");
	}
	
	@RequestMapping(value="/deleteLog.do")
	@ResponseBody
	public String deleteLog(String log_Id,@ModelAttribute("getPerson")person person){
		if(person!=null&&lzzPersonService.deleteLog(Integer.parseInt(log_Id)))
			return "ok";
		else return "no";
	}
	
	@RequestMapping(value="/likeLog.do")
	@ResponseBody
	public void likeLog(String log_Id,@ModelAttribute("getPerson")person person){
		imgLogLiker.setImgLog_id(Integer.parseInt(log_Id));
		imgLogLiker.setFriend_id(person.getId());
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		imgLogLiker.setCreate_time(sf.format(new Date()));
		imgLogLiker.setIs_delete(0);
		imgLogLiker.setId(0);
		if(person!=null){
			lzzPersonService.likeLog(imgLogLiker);
		}
	}
	
	@RequestMapping(value="/sendCmt.do")
	@ResponseBody
	public void sendCmt(@RequestParam("id")String log_id,@RequestParam("content")String content,HttpServletRequest request){
		person person = (groupthree.myspace.bean.person) request.getSession().getAttribute("user");
		if(person!=null){
			imgLogCmt.setComment_content(content);
			imgLogCmt.setImgLog_id(Integer.parseInt(log_id));
			imgLogCmt.setFriend_id(person.getId());
			lzzPersonService.sendCmt(imgLogCmt);
		}
	}
}
